'use server';
import { createServerActionClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { Database } from '@/lib/db_types';
import { cache } from 'react';

export const getCurrentUser = cache(async () => {
  const supabase = createServerActionClient<Database>({ cookies });
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();

  if (userError) {
    console.log('error getting user', userError);
  }

  return user;
});

export async function getPosts() {
  const supabase = createServerActionClient<Database>({ cookies });
  const { data: posts, error } = await supabase.from('post').select('*');
  if (error) {
    console.log(error);
  }
  return posts;
}

export async function getPost(id: number) {
  const supabase = createServerActionClient<Database>({ cookies });
  const fetcher = cache(async () => {
    const { data: post, error } = await supabase
      .from('post')
      .select('*')
      .eq('id', id)
      .single();
    if (error) {
      console.log(error);
    }
    return post;
  });
  return fetcher();
}

type NewPost = {
  title: string;
  content: string;
  is_published: boolean;
  author_id: string;
};
export async function createPost({
  title,
  content,
  is_published,
  author_id,
}: NewPost) {
  const supabase = createServerActionClient<Database>({ cookies });
  const publishedDate = is_published ? new Date().toDateString() : null;
  const { data, error } = await supabase
    .from('post')
    .insert([
      {
        title,
        content,
        is_published,
        published_date: publishedDate,
        author_id,
      },
    ])
    .select();
  if (error) {
    console.log(error);
  }
  return data;
}

export async function updatePost(
  id: string,
  { title, content, is_published }: NewPost,
) {
  const supabase = createServerActionClient<Database>({ cookies });
  const publishedDate = is_published ? new Date().toDateString() : null;
  const { data, error } = await supabase
    .from('post')
    .update({
      title,
      content,
      is_published,
      published_date: publishedDate,
    })
    .eq('id', id)
    .select();
  if (error) {
    console.log(error);
  }
  return data;
}

/**
 * Tag Table
 * id bigint generated by default as identity not null,
 *     created_at timestamp with time zone not null default now(),
 *     name text not null,
 *     post_id bigint not null,
 *     constraint tag_pkey primary key (id),
 *     constraint tag_id_key unique (id),
 *     constraint tag_post_id_fkey foreign key (post_id) references post (id) on delete cascade
 */

type NewTag = {
  name: string;
  post_id: number;
};

export async function getAllTags() {
  const supabase = createServerActionClient<Database>({ cookies });
  const { data, error } = await supabase.from('tag').select('*');
  if (error) {
    console.log(error);
  }
  return data;
}

export async function getTagsByPostId(post_id: number) {
  const supabase = createServerActionClient<Database>({ cookies });
  const { data, error } = await supabase
    .from('tag')
    .select('*')
    .eq('post_id', post_id);
  if (error) {
    console.log(error);
  }
  return data;
}

export async function createTag({ name, post_id }: NewTag) {
  const supabase = createServerActionClient<Database>({ cookies });
  const { data, error } = await supabase
    .from('tag')
    .insert([
      {
        name,
        post_id,
      },
    ])
    .select();
  if (error) {
    console.log(error);
  }
  return data;
}
